import streamlit as st
import pandas as pd
import folium
from streamlit_folium import folium_static
from folium.features import CustomIcon

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_resource
def load_data():
    data = pd.read_csv("data/data.tsv", sep='\t')
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
def filter_column_like_geo(column, values):
    if values and values != 'Select':
        if isinstance(values, list):  # –µ—Å–ª–∏ values - —Å–ø–∏—Å–æ–∫
            return data[data[column].isin(values)]
        else:  # –µ—Å–ª–∏ values - –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            return data[data[column] == values]
    return data

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞
def get_declension_word(n):
    return 'sample' if n == 1 else 'samples'

data = load_data()

st.title('üó∫Ô∏èInteractive map')


# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≥–ª—É–±–∏–Ω–µ
filtered_depth_data = data[(data['depth'] != 'unknown') & (data['depth'] != 'None')]
filtered_depth_data['depth'] = filtered_depth_data['depth'].astype(float)
min_depth, max_depth = st.sidebar.slider(
    'Select the depth range',
    float(filtered_depth_data['depth'].min()),
    float(filtered_depth_data['depth'].max()),
    [float(filtered_depth_data['depth'].min()), float(filtered_depth_data['depth'].max())]
)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
unique_processes = sorted(data['study_process'].dropna().unique().tolist())
selected_processes = st.sidebar.multiselect(
    "Select the research process",
    unique_processes,
    default=unique_processes
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if not selected_processes:
    selected_processes = unique_processes
    st.warning('At least one research process must be selected.')
    st.experimental_rerun()

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º
filtered_data = filter_column_like_geo('study_process', selected_processes)
filtered_data['depth'] = pd.to_numeric(filtered_data['depth'], errors='coerce')  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
filtered_data = filtered_data[(filtered_data['depth'] >= min_depth) & (filtered_data['depth'] <= max_depth)]
filtered_data = pd.concat([filtered_data, data[data['depth'].isin(['unknown', 'None'])]])
filtered_data['latitude'] = pd.to_numeric(filtered_data['latitude'], errors='coerce')
filtered_data['longitude'] = pd.to_numeric(filtered_data['longitude'], errors='coerce')
filtered_data = filtered_data.dropna(subset=['latitude', 'longitude'])

# –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
n_samples = len(filtered_data)
verb = "was" if n_samples == 1 else "were"
st.write(f'{n_samples} {get_declension_word(n_samples)} {verb} selected')

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å folium
m = folium.Map(
    location=[filtered_data['latitude'].mean(), filtered_data['longitude'].mean()],
    zoom_start=2,
    tiles="http://services.arcgisonline.com/arcgis/rest/services/NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}",
    attr="¬© OpenStreetMap contributors"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É
for _, row in filtered_data.iterrows():
    popup_content = f"""
    <div>
        <strong>Archive Project:</strong> {row['archive_project']}<br>
        <a href="https://www.ncbi.nlm.nih.gov/search/all/?term={row['archive_project']}" target="_blank">NCBI Link</a>
    </div>
    """
    popup = folium.Popup(popup_content, max_width=300)
    icon = CustomIcon(
        icon_image="assets/marker/oil_marker.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –º–∞—Ä–∫–µ—Ä–∞
        icon_size=(30, 30)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    )
    folium.Marker(
        [row['latitude'], row['longitude']],
        popup=popup,
        icon=icon
    ).add_to(m)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ Streamlit
folium_static(m)
